// Generated by CoffeeScript 1.6.2
(function() {
  var $;

  $ = jQuery;

  $.fn.extend({
    resizableColumns: function(method_or_opts) {
      var makeResizable;

      if (method_or_opts == null) {
        method_or_opts = {};
      }
      makeResizable = function($table) {
        var $currentGrip, $handleContainer, createHandles, mousedown, mousemove, mouseup, startPosition, startWidth, syncHandle, syncHandleWidths, tableId;

        tableId = $table.data('resizable-columns-id');
        $handleContainer = void 0;
        startPosition = void 0;
        startWidth = void 0;
        $currentGrip = void 0;
        mouseup = function() {
          console.log('mouseup\'d');
          return $(document).off('mousemove.rc');
        };
        mousemove = function(e) {
          var newWidth;

          console.log($currentGrip);
          newWidth = startWidth + (e.pageX - startPosition);
          console.log('nw', newWidth);
          if (!(newWidth < 1)) {
            $currentGrip.data('th').width(newWidth);
          }
          return syncHandleWidths();
        };
        mousedown = function(e) {
          startPosition = e.pageX;
          $currentGrip = $(e.currentTarget);
          startWidth = $currentGrip.data('th').width();
          console.log('started drag', e.pageX);
          $(document).on('mousemove.rc', mousemove);
          return $(document).one('mouseup', mouseup);
        };
        createHandles = function() {
          $table.before(($handleContainer = $("<div class='rc-handle-container' />")));
          $table.find('tr th').each(function() {
            var $handle;

            $handle = $("<div class='rc-handle' />");
            $handle.data('th', $(this));
            return $handle.appendTo($handleContainer);
          });
          return $handleContainer.on('mousedown', '.rc-handle', mousedown);
        };
        syncHandleWidths = function() {
          $handleContainer.width($table.width());
          return $handleContainer.find('.rc-handle').each(function() {
            return syncHandle($(this));
          });
        };
        syncHandle = function($handle) {
          return $handle.css({
            left: $handle.data('th').outerWidth() + ($handle.data('th').offset().left - $handleContainer.offset().left),
            height: $table.height()
          });
        };
        createHandles();
        return syncHandleWidths();
      };
      return $(this).each(function() {
        if (typeof method_or_opts === 'string') {
          return $(this).resizable(method_or_opts);
        } else {
          return makeResizable($(this));
        }
      });
    }
  });

}).call(this);
